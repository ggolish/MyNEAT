# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_neat_backend')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_neat_backend')
    _neat_backend = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_neat_backend', [dirname(__file__)])
        except ImportError:
            import _neat_backend
            return _neat_backend
        try:
            _mod = imp.load_module('_neat_backend', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _neat_backend = swig_import_helper()
    del swig_import_helper
else:
    import _neat_backend
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neat_backend.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _neat_backend.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _neat_backend.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _neat_backend.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _neat_backend.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _neat_backend.SwigPyIterator_equal(self, x)

    def copy(self):
        return _neat_backend.SwigPyIterator_copy(self)

    def next(self):
        return _neat_backend.SwigPyIterator_next(self)

    def __next__(self):
        return _neat_backend.SwigPyIterator___next__(self)

    def previous(self):
        return _neat_backend.SwigPyIterator_previous(self)

    def advance(self, n):
        return _neat_backend.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _neat_backend.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _neat_backend.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _neat_backend.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _neat_backend.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _neat_backend.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _neat_backend.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _neat_backend.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class GenomeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenomeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenomeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neat_backend.GenomeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neat_backend.GenomeVector___nonzero__(self)

    def __bool__(self):
        return _neat_backend.GenomeVector___bool__(self)

    def __len__(self):
        return _neat_backend.GenomeVector___len__(self)

    def __getslice__(self, i, j):
        return _neat_backend.GenomeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neat_backend.GenomeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neat_backend.GenomeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neat_backend.GenomeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neat_backend.GenomeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neat_backend.GenomeVector___setitem__(self, *args)

    def pop(self):
        return _neat_backend.GenomeVector_pop(self)

    def append(self, x):
        return _neat_backend.GenomeVector_append(self, x)

    def empty(self):
        return _neat_backend.GenomeVector_empty(self)

    def size(self):
        return _neat_backend.GenomeVector_size(self)

    def swap(self, v):
        return _neat_backend.GenomeVector_swap(self, v)

    def begin(self):
        return _neat_backend.GenomeVector_begin(self)

    def end(self):
        return _neat_backend.GenomeVector_end(self)

    def rbegin(self):
        return _neat_backend.GenomeVector_rbegin(self)

    def rend(self):
        return _neat_backend.GenomeVector_rend(self)

    def clear(self):
        return _neat_backend.GenomeVector_clear(self)

    def get_allocator(self):
        return _neat_backend.GenomeVector_get_allocator(self)

    def pop_back(self):
        return _neat_backend.GenomeVector_pop_back(self)

    def erase(self, *args):
        return _neat_backend.GenomeVector_erase(self, *args)

    def __init__(self, *args):
        this = _neat_backend.new_GenomeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neat_backend.GenomeVector_push_back(self, x)

    def front(self):
        return _neat_backend.GenomeVector_front(self)

    def back(self):
        return _neat_backend.GenomeVector_back(self)

    def assign(self, n, x):
        return _neat_backend.GenomeVector_assign(self, n, x)

    def resize(self, *args):
        return _neat_backend.GenomeVector_resize(self, *args)

    def insert(self, *args):
        return _neat_backend.GenomeVector_insert(self, *args)

    def reserve(self, n):
        return _neat_backend.GenomeVector_reserve(self, n)

    def capacity(self):
        return _neat_backend.GenomeVector_capacity(self)
    __swig_destroy__ = _neat_backend.delete_GenomeVector
    __del__ = lambda self: None
GenomeVector_swigregister = _neat_backend.GenomeVector_swigregister
GenomeVector_swigregister(GenomeVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neat_backend.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neat_backend.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _neat_backend.DoubleVector___bool__(self)

    def __len__(self):
        return _neat_backend.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _neat_backend.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neat_backend.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neat_backend.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neat_backend.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neat_backend.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neat_backend.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _neat_backend.DoubleVector_pop(self)

    def append(self, x):
        return _neat_backend.DoubleVector_append(self, x)

    def empty(self):
        return _neat_backend.DoubleVector_empty(self)

    def size(self):
        return _neat_backend.DoubleVector_size(self)

    def swap(self, v):
        return _neat_backend.DoubleVector_swap(self, v)

    def begin(self):
        return _neat_backend.DoubleVector_begin(self)

    def end(self):
        return _neat_backend.DoubleVector_end(self)

    def rbegin(self):
        return _neat_backend.DoubleVector_rbegin(self)

    def rend(self):
        return _neat_backend.DoubleVector_rend(self)

    def clear(self):
        return _neat_backend.DoubleVector_clear(self)

    def get_allocator(self):
        return _neat_backend.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _neat_backend.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _neat_backend.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _neat_backend.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neat_backend.DoubleVector_push_back(self, x)

    def front(self):
        return _neat_backend.DoubleVector_front(self)

    def back(self):
        return _neat_backend.DoubleVector_back(self)

    def assign(self, n, x):
        return _neat_backend.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _neat_backend.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _neat_backend.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _neat_backend.DoubleVector_reserve(self, n)

    def capacity(self):
        return _neat_backend.DoubleVector_capacity(self)
    __swig_destroy__ = _neat_backend.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _neat_backend.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleDoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neat_backend.DoubleDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neat_backend.DoubleDoubleVector___nonzero__(self)

    def __bool__(self):
        return _neat_backend.DoubleDoubleVector___bool__(self)

    def __len__(self):
        return _neat_backend.DoubleDoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _neat_backend.DoubleDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neat_backend.DoubleDoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neat_backend.DoubleDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neat_backend.DoubleDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neat_backend.DoubleDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neat_backend.DoubleDoubleVector___setitem__(self, *args)

    def pop(self):
        return _neat_backend.DoubleDoubleVector_pop(self)

    def append(self, x):
        return _neat_backend.DoubleDoubleVector_append(self, x)

    def empty(self):
        return _neat_backend.DoubleDoubleVector_empty(self)

    def size(self):
        return _neat_backend.DoubleDoubleVector_size(self)

    def swap(self, v):
        return _neat_backend.DoubleDoubleVector_swap(self, v)

    def begin(self):
        return _neat_backend.DoubleDoubleVector_begin(self)

    def end(self):
        return _neat_backend.DoubleDoubleVector_end(self)

    def rbegin(self):
        return _neat_backend.DoubleDoubleVector_rbegin(self)

    def rend(self):
        return _neat_backend.DoubleDoubleVector_rend(self)

    def clear(self):
        return _neat_backend.DoubleDoubleVector_clear(self)

    def get_allocator(self):
        return _neat_backend.DoubleDoubleVector_get_allocator(self)

    def pop_back(self):
        return _neat_backend.DoubleDoubleVector_pop_back(self)

    def erase(self, *args):
        return _neat_backend.DoubleDoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _neat_backend.new_DoubleDoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neat_backend.DoubleDoubleVector_push_back(self, x)

    def front(self):
        return _neat_backend.DoubleDoubleVector_front(self)

    def back(self):
        return _neat_backend.DoubleDoubleVector_back(self)

    def assign(self, n, x):
        return _neat_backend.DoubleDoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _neat_backend.DoubleDoubleVector_resize(self, *args)

    def insert(self, *args):
        return _neat_backend.DoubleDoubleVector_insert(self, *args)

    def reserve(self, n):
        return _neat_backend.DoubleDoubleVector_reserve(self, n)

    def capacity(self):
        return _neat_backend.DoubleDoubleVector_capacity(self)
    __swig_destroy__ = _neat_backend.delete_DoubleDoubleVector
    __del__ = lambda self: None
DoubleDoubleVector_swigregister = _neat_backend.DoubleDoubleVector_swigregister
DoubleDoubleVector_swigregister(DoubleDoubleVector)

class NEAT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NEAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NEAT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["population_size"] = _neat_backend.NEAT_population_size_set
    __swig_getmethods__["population_size"] = _neat_backend.NEAT_population_size_get
    if _newclass:
        population_size = _swig_property(_neat_backend.NEAT_population_size_get, _neat_backend.NEAT_population_size_set)
    __swig_setmethods__["ninputs"] = _neat_backend.NEAT_ninputs_set
    __swig_getmethods__["ninputs"] = _neat_backend.NEAT_ninputs_get
    if _newclass:
        ninputs = _swig_property(_neat_backend.NEAT_ninputs_get, _neat_backend.NEAT_ninputs_set)
    __swig_setmethods__["noutputs"] = _neat_backend.NEAT_noutputs_set
    __swig_getmethods__["noutputs"] = _neat_backend.NEAT_noutputs_get
    if _newclass:
        noutputs = _swig_property(_neat_backend.NEAT_noutputs_get, _neat_backend.NEAT_noutputs_set)
    __swig_setmethods__["population"] = _neat_backend.NEAT_population_set
    __swig_getmethods__["population"] = _neat_backend.NEAT_population_get
    if _newclass:
        population = _swig_property(_neat_backend.NEAT_population_get, _neat_backend.NEAT_population_set)
    __swig_setmethods__["species_list"] = _neat_backend.NEAT_species_list_set
    __swig_getmethods__["species_list"] = _neat_backend.NEAT_species_list_get
    if _newclass:
        species_list = _swig_property(_neat_backend.NEAT_species_list_get, _neat_backend.NEAT_species_list_set)
    __swig_setmethods__["node_innov"] = _neat_backend.NEAT_node_innov_set
    __swig_getmethods__["node_innov"] = _neat_backend.NEAT_node_innov_get
    if _newclass:
        node_innov = _swig_property(_neat_backend.NEAT_node_innov_get, _neat_backend.NEAT_node_innov_set)
    __swig_setmethods__["conn_innov"] = _neat_backend.NEAT_conn_innov_set
    __swig_getmethods__["conn_innov"] = _neat_backend.NEAT_conn_innov_get
    if _newclass:
        conn_innov = _swig_property(_neat_backend.NEAT_conn_innov_get, _neat_backend.NEAT_conn_innov_set)

    def __init__(self, population_size, ninputs, noutputs):
        this = _neat_backend.new_NEAT(population_size, ninputs, noutputs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neat_backend.delete_NEAT
    __del__ = lambda self: None

    def feed_forward(self, index, inputs):
        return _neat_backend.NEAT_feed_forward(self, index, inputs)

    def feed_forward_all(self, inputs):
        return _neat_backend.NEAT_feed_forward_all(self, inputs)

    def speciate(self):
        return _neat_backend.NEAT_speciate(self)

    def repopulate(self, fitnesses):
        return _neat_backend.NEAT_repopulate(self, fitnesses)
NEAT_swigregister = _neat_backend.NEAT_swigregister
NEAT_swigregister(NEAT)

# This file is compatible with both classic and new-style classes.


